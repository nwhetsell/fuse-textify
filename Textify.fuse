TextifySemanticVersion = "1.0.0"
InternalVersionsBySemanticVersion = {
  ["1.0.0"] = 1
}
RELEASE = false

FuRegisterClass("Textify", CT_Tool, {
  REGS_Name             = "Textify",
  REGS_Category         = "Miscellaneous",
  REGS_OpIconString     = "Txt",
  REGS_OpDescription    = "Image-to-text conversion",
  REGS_URL              = "https://github.com/nwhetsell/fuse-textify",
  REG_NoMotionBlurCtrls = true,
  REG_NoBlendCtrls      = false,
  REG_OpNoMask          = false,
  REG_Fuse_NoEdit       = RELEASE,
  REG_Fuse_NoReload     = RELEASE,
  REG_SupportsDoD       = true,
  REG_Version           = InternalVersionsBySemanticVersion[TextifySemanticVersion]
})

local conversionStrategies = {
  "@BG8Cou; ",
  "#|/+=-. ",
  "8960453271 ",
  "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,^`'. "
}

function Create()
  ---@diagnostic disable: undefined-global # because `self` is undefined here

  ---@param labelName string
  ---@param scriptName string
  ---@param attributes table
  ---@return Input
  local function addInput(labelName, scriptName, attributes)
    return self:AddInput(labelName, scriptName, attributes)
  end

  ---@param labelName string
  ---@param scriptName string
  ---@param attributes table
  ---@return Output
  ---@nodiscard
  local function addOutput(labelName, scriptName, attributes)
    return self:AddOutput(labelName, scriptName, attributes)
  end

  ---@diagnostic enable: undefined-global

  InputFont = addInput("Font", "Font", {
    LINKID_DataType = "Text",
    INPID_InputControl = "FontFileControl",
    IC_ControlGroup = 2,
    IC_ControlID = 0,
    INP_Level = 1,
    INP_DoNotifyChanged = true
  })

  InputFontStyle = addInput("Style", "Style", {
    LINKID_DataType = "Text",
    INPID_InputControl = "FontFileControl",
    IC_ControlGroup = 2,
    IC_ControlID = 1,
    INP_Level = 1,
    INP_DoNotifyChanged = true
  })

  InputConversionStrategyIndex = addInput("Conversion Strategy", "ConversionStrategyIndex", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0,
    INP_Integer = true,
    { CCS_AddString = "Round – " .. conversionStrategies[1]:gsub("%s+", "") },
    { CCS_AddString = "Square – " .. conversionStrategies[2]:gsub("%s+", "") },
    { CCS_AddString = "Numbers – " .. conversionStrategies[3]:gsub("%s+", "") },
    { CCS_AddString = "ASCII Characters" }
  })

  InputCharactersPerLine = addInput("Characters per Line","CharactersPerLine", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 320,
    INP_MinScale = 1,
    INP_Default = 80,
    INP_Integer = true
  })

  InputFontSizeFactor = addInput("Font Size Factor", "FontSizeFactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 5,
    INP_MinScale = 1,
    INP_Default = 2.5
  })

  InputCharacterScaleFactor = addInput("Character Scale", "CharacterScaleFactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 8,
    INP_MinScale = 0.1,
    INP_Default = 1
  })

  InputYOffsetFactor = addInput("Y Offset Factor", "YOffsetFactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 1,
    INP_MinScale = 0,
    INP_Default = 0.25
  })

  InputLineHeightFactor = addInput("Line Height Factor", "LineHeightFactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 2,
    INP_MinScale = 0.5,
    INP_Default = 1
  })

  InputSaturation = addInput("Input Desaturation", "Saturation", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0
  })

  InputContrast = addInput("Input Contrast", "Contrast", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_MaxScale = 10,
    INP_MinScale = 0,
    INP_Default = 1
  })

  InputInvert = addInput("Invert Input", "Invert", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_Integer = true,
    INP_Default = 0
  })

  InputOversampling = addInput("Output Oversampling", "Oversampling", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Integer = true,
    INP_Default = 8
  })

  InputText = addInput("Text", "Text", {
    LINKID_DataType = "Text",
    INPID_InputControl = "TextEditControl",
    TEC_Lines = 5,
    TEC_Wrap = true
  })

  InputTranslationTableText = addInput("Translation Table", "TranslationTable", {
    LINKID_DataType = "Text",
    INPID_InputControl = "TextEditControl",
    TEC_Lines = 29
  })

  InputTranslationTableDefaultButton = addInput("Use Default Translation Table", "UseDefaultTranslationTable", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ButtonControl",
    BTNC_Align = "Right", -- This doesn’t appear to do anything.
    INP_DoNotifyChanged = true,
    INP_External = false
  })

  addInput("Textify v" .. TextifySemanticVersion, "Version", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true
  })

  addInput("Based on Computer Vision by Meta Fide", "Attribution", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true
  })

  InputImage = addInput("Input", "Input", {
    LINKID_DataType = "Image",
    LINK_Main = 1
  })
  OutputImage = addOutput("Main Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1
  })
  OutputScaledDownsampledImage = addOutput("Scaled Downsampled Image", "ScaledDownsampledImage", {
    LINKID_DataType = "Image",
    LINK_Main = 2
  })
  OutputRawDownsampledImage = addOutput("Raw Downsampled Image", "RawDownsampledImage", {
    LINKID_DataType = "Image",
    LINK_Main = 3
  })
end

local function isNilOrEmptyString(arg)
  return arg == nil or string.len(arg) == 0
end

---@param input Input Input object for the control that changed
---@param parameter Parameter Parameter object produced by the control
---@param frame integer Frame when control changed
function NotifyChanged(input, parameter, frame)
  if InputFont == input then
    if isNilOrEmptyString(parameter.Value) then
      InputFont:SetSource(Text("Courier"), frame)
    end
  elseif InputFontStyle == input then
    if isNilOrEmptyString(parameter.Value) then
      InputFontStyle:SetSource(Text("Regular"), frame)
    end
  elseif InputTranslationTableDefaultButton == input then
    if parameter.Value == 1 then
      InputTranslationTableText:SetSource(
        -- This is
        --[[
          {
            a = "@Ⱥ₳Aa",
            b = "ƁßBƂƃƀƄƅb",
            c = "₡₵ȻƇƆCC¢ƈc",
            d = "ƌƋƉƊDd",
            e = "ƎEƏƐƸƹe℮",
            f = "Ƒ₣Fƒf",
            g = "ƓGg",
            h = "HHǶƕh",
            i = "Ii",
            j = "Jjȷ",
            k = "₭Kk",
            l = "ȽLƚl",
            m = "ƜM₥m",
            n = "₦ƝȠNNƞn",
            o = "Ø0Oøo",
            p = "ƤPPƥp",
            q = "Qq",
            r = "ƦɌRɍr",
            s = "ƧSȿsƨ",
            t = "₮ȾƫƬTt",
            u = "Uu",
            v = "ƲVv",
            w = "₩Ww",
            x = "Xx×",
            y = "¥ƳYƴy",
            z = "ƵZZƶz",
            [" "]  = "▙▛▜▟▚▞▒░ "
          }
        ]]
        -- with appropriate escapes.
        Text("{\
  a = \"@Ⱥ₳Aa\",\
  b = \"ƁßBƂƃƀƄƅb\",\
  c = \"₡₵ȻƇƆCC¢ƈc\",\
  d = \"ƌƋƉƊDd\",\
  e = \"ƎEƏƐƸƹe℮\",\
  f = \"Ƒ₣Fƒf\",\
  g = \"ƓGg\",\
  h = \"HHǶƕh\",\
  i = \"Ii\",\
  j = \"Jjȷ\",\
  k = \"₭Kk\",\
  l = \"ȽLƚl\",\
  m = \"ƜM₥m\",\
  n = \"₦ƝȠNNƞn\",\
  o = \"Ø0Oøo\",\
  p = \"ƤPPƥp\",\
  q = \"Qq\",\
  r = \"ƦɌRɍr\",\
  s = \"ƧSȿsƨ\",\
  t = \"₮ȾƫƬTt\",\
  u = \"Uu\",\
  v = \"ƲVv\",\
  w = \"₩Ww\",\
  x = \"Xx×\",\
  y = \"¥ƳYƴy\",\
  z = \"ƵZZƶz\",\
  [\" \"]  = \"▙▛▜▟▚▞▒░ \"\
}"),
        frame
      )
    end
  end
end


-- START OF https://github.com/blitmap/lua-utf8-simple/blob/7ef030750d8e408ac5d724aefab2ec8769731005/utf8_simple.lua

local pattern = '[%z\1-\127\194-\244][\128-\191]*'

-- helper function
local posrelat =
  function (pos, len)
    if pos < 0 then
      pos = len + pos + 1
    end

    return pos
  end

local utf8 = {}

-- THE MEAT

-- maps f over s's utf8 characters f can accept args: (visual_index, utf8_character, byte_index)
utf8.map =
  function (s, f, no_subs)
    local i = 0

    if no_subs then
      for b, e in s:gmatch('()' .. pattern .. '()') do
        i = i + 1
        local c = e - b
        f(i, c, b)
      end
    else
      for b, c in s:gmatch('()(' .. pattern .. ')') do
        i = i + 1
        f(i, c, b)
      end
    end
  end

-- THE REST

-- generator for the above -- to iterate over all utf8 chars
utf8.chars =
  function (s, no_subs)
    return coroutine.wrap(function () return utf8.map(s, coroutine.yield, no_subs) end)
  end

-- returns the number of characters in a UTF-8 string
utf8.len =
  function (s)
    -- count the number of non-continuing bytes
    return select(2, s:gsub('[^\128-\193]', ''))
  end

-- replace all utf8 chars with mapping
utf8.replace =
  function (s, map)
    return s:gsub(pattern, map)
  end

-- reverse a utf8 string
utf8.reverse =
  function (s)
    -- reverse the individual greater-than-single-byte characters
    s = s:gsub(pattern, function (c) return #c > 1 and c:reverse() end)

    return s:reverse()
  end

-- strip non-ascii characters from a utf8 string
utf8.strip =
  function (s)
    return s:gsub(pattern, function (c) return #c > 1 and '' end)
  end

-- like string.sub() but i, j are utf8 strings
-- a utf8-safe string.sub()
utf8.sub =
  function (s, i, j)
    local l = utf8.len(s)

    i =       posrelat(i, l)
    j = j and posrelat(j, l) or l

    if i < 1 then i = 1 end
    if j > l then j = l end

    if i > j then return '' end

    local diff = j - i
    local iter = utf8.chars(s, true)

    -- advance up to i
    for _ = 1, i - 1 do iter() end

    local c, b = select(2, iter())

    -- i and j are the same, single-charaacter sub
    if diff == 0 then
      return string.sub(s, b, b + c - 1)
    end

    i = b

    -- advance up to j
    for _ = 1, diff - 1 do iter() end

    c, b = select(2, iter())

    return string.sub(s, i, b + c - 1)
  end

-- END OF https://github.com/blitmap/lua-utf8-simple/blob/7ef030750d8e408ac5d724aefab2ec8769731005/utf8_simple.lua

---@param s string
---@param i? integer
---@param j? integer
---@return integer[]
utf8.codepoint = function(s, i, j)
  i = i or 1
  j = j or i

  ---@return integer|nil
  local function decode()
    local bit = {}

    -- From http://lua-users.org/wiki/BitUtils

    ---@param a integer
    ---@param b integer
    ---@return integer
    ---@nodiscard
    bit.bxor = function(a, b)
      local pow = 1
      local c = 0
      while a > 0 or b > 0 do
        c = c + (bit.XOR_l[(a % 2)+1][(b % 2)+1] * pow)
        a = math.floor(a/2)
        b = math.floor(b/2)
        pow = pow * 2
      end
      return c
    end

    bit.XOR_l = { {0, 1}, {1, 0} }

    -- Based on https://github.com/davidm/lua-bit-numberlua/blob/30b6828b298b46411b548202d40524caba06a99c/lmod/bit/numberlua.lua
    bit.MODM = 2^32 - 1

    ---@param a integer
    ---@return integer
    ---@nodiscard
    bit.bnot = function(a)
      return bit.MODM - 1 - a
    end

    ---@param a integer
    ---@param b integer
    ---@return integer
    ---@nodiscard
    bit.band = function(a, b)
      return ((a+b) - bit.bxor(a,b))/2
    end

    ---@param a integer
    ---@param b integer
    ---@return integer
    ---@nodiscard
    bit.bor = function(a, b)
      return bit.MODM - bit.band(bit.MODM - a, bit.MODM - b)
    end

    ---@param a integer
    ---@param disp integer
    ---@return integer
    ---@nodiscard
    bit.rshift = function(a,disp) -- Lua5.2 insipred
      if disp < 0 then return bit.lshift(a,-disp) end
      return math.floor(a % 2^32 / 2^disp)
    end

    ---@param a integer
    ---@param disp integer
    ---@return integer
    ---@nodiscard
    bit.lshift = function(a,disp) -- Lua5.2 inspired
      if disp < 0 then return bit.rshift(a,-disp) end
      return (a * 2^disp) % 2^32
    end

    -- Based on
    -- https://github.com/luapower/utf8/blob/702449d5728dd65c3ed41151ec32db5b1cc932de/utf8.lua#L38
    local b1 = s:byte(i)

    i = i + 1
    if b1 < 0x80 then
      return b1
    end

    if b1 < 0xC2 then
      return nil
    end

    if b1 < 0xE0 then
      local b2 = s:byte(i)
      if 0x80 <= b2 and b2 <= 0xBF then
        i = i + 1
        return bit.lshift(bit.band(b1, 0x1F), 6) + bit.band(b2, 0x3F)
      end
    elseif b1 < 0xF0 then
       local b2 = s:byte(i)
       local b3 = s:byte(i + 1)
       if not (
            b2 < 0x80 or b2 > 0xBF
         or b3 < 0x80 or b3 > 0xBF
         or (b1 == 0xE0 and b2 < 0xA0)
         or (b1 == 0xED and b2 > 0x9F)
       ) then
        i = i + 2
        return bit.lshift(bit.band(b1, 0x0F), 12) + bit.lshift(bit.band(b2, 0x3F), 6) + bit.band(b3, 0x3F)
       end
    elseif b1 <= 0xF4 then
      local b2 = s:byte(i)
      local b3 = s:byte(i + 1)
      local b4 = s:byte(i + 2)
      if not (
           b2 < 0x80 or b2 > 0xBF
        or b3 < 0x80 or b3 > 0xBF
        or b3 < 0x80 or b3 > 0xBF
        or b4 < 0x80 or b4 > 0xBF
        or (b1 == 0xF0 and b2 < 0x90)
        or (b1 == 0xF4 and b2 > 0x8F)
      ) then
        i = i + 3
        return bit.lshift(bit.band(b1, 0x07), 18) + bit.lshift(bit.band(b2, 0x3F), 12) + bit.lshift(bit.band(b3, 0x3F), 6) + bit.band(b4, 0x3F)
      end
    end

    return nil
  end

  local codepoints = {} --[=[@as integer[]]=]
  while i <= j do
    local code = decode()
    assert(code, "Invalid byte sequence in UTF-8 string")
    table.insert(codepoints, code)
  end
  return codepoints
end


---@param request Request
function Process(request)
  local inputImage = InputImage:GetValue(request) --[[@as Image]]
  local outputImage = Image({ IMG_Like = inputImage })
  outputImage:Clear()

  local translationTable = {}
  local func, err = load("return function() return " .. InputTranslationTableText:GetValue(request).Value .. " end")
  if func then
    local ok, getTranslationTable = pcall(func)
    if ok then
      translationTable = getTranslationTable()
    else
      print("Execution error:", getTranslationTable)
    end
  else
    print("Compilation error:", err)
  end

  -- Downsample the image so that there is one pixel per character.
  local sizeFactor = InputFontSizeFactor:GetValue(request).Value --[[@as number]]
  local charactersPerLine = InputCharactersPerLine:GetValue(request).Value --[[@as integer]]
  local characterWidth = 1 / charactersPerLine
  local size = sizeFactor * characterWidth
  local font = InputFont:GetValue(request).Value --[[@as string]]
  local style = InputFontStyle:GetValue(request).Value --[[@as string]]
  local fontMetrics = TextStyleFontMetrics(TextStyleFont(font, style))
  local lineHeight = (fontMetrics.TextAscent + fontMetrics.TextDescent + fontMetrics.TextExternalLeading) * 10 * size
  local lineHeightFactor = InputLineHeightFactor:GetValue(request).Value --[[@as number]]
  if lineHeightFactor > 0 then
    lineHeight = lineHeight * lineHeightFactor
  end

  local aspectRatio = inputImage.Width / inputImage.Height

  -- The width of the downsampled image is the number of characters per line.
  -- For the downsampled image to have one character per pixel, its height
  -- should be the number of lines. The value of lineHeight seems to be in units
  -- normalized by the width of the input image. So, when normalized by width,
  -- the height of the image is
  --   image.Height / image.Width
  -- which is equal to
  --   1 / aspectRatio
  -- Dividing this by lineHeight should give the number of lines.
  local lineCount = math.ceil((1 / aspectRatio) / lineHeight)

  local downsampledImage = Image({
    IMG_Like = inputImage,
    IMG_Width = charactersPerLine,
    IMG_Height = lineCount,
    IMAT_OriginalWidth = charactersPerLine,
    IMAT_OriginalHeight = lineCount,
    IMG_Depth = 1 -- TODO: Is this necessary?
  })
  inputImage:Resize(downsampledImage, { RSZ_Filter = "Nearest" })

  -- Output the downsampled image, scaled to the same size as the input image,
  -- to make it easy to add color to the output text.
  local scaledDownsampledImage = Image({
    IMG_Like = downsampledImage,
    IMG_Width = inputImage.Width,
    IMG_Height = inputImage.Height,
    IMAT_OriginalWidth = inputImage.Width,
    IMAT_OriginalHeight = inputImage.Height
  })
  downsampledImage:Resize(scaledDownsampledImage, { RSZ_Filter = "Nearest" })
  OutputScaledDownsampledImage:Set(request, scaledDownsampledImage)

  -- Further process the downsampled image.
  local saturation = InputSaturation:GetValue(request).Value --[[@as number]]
  downsampledImage:Saturate(saturation, saturation, saturation)

  local contrast = InputContrast:GetValue(request).Value --[[@as number]]
  local colorMatrix = ColorMatrix()
  colorMatrix:Offset(-0.5, -0.5, -0.5)
  colorMatrix:Scale(contrast, contrast, contrast)
  colorMatrix:Offset(0.5, 0.5, 0.5)
  downsampledImage = downsampledImage:ApplyMatrixOf(colorMatrix, {})

  -- The Invert checkbox is confusing because we invert the image when the
  -- checkbox is *disabled*. This is because strings of characters that map to
  -- pixels are typically ordered from most dense (like @) to least dense (like
  -- a space character). Consequently, the most dense characters are at the
  -- lowest indexes of a string, and the least dense characters are at the
  -- highest. Calculating a string index from a “bright” pixel (one with a high
  -- HSL lightness, for example) will result in a higher index and map to a
  -- lower density character, not a high density character that we might expect.
  -- Thus, inverting the image results in a more natural mapping of characters
  -- to pixels (brighter pixels get denser characters).
  local invert = InputInvert:GetValue(request).Value == 0
  if invert then
    downsampledImage = downsampledImage:ChannelOpOf("Invert", nil, { R="bg.R", G="bg.G", B="bg.B" })
  end

  -- Also output the raw downsampled image (which is probably only useful for
  -- debugging).
  OutputRawDownsampledImage:Set(request, downsampledImage)

  -- Convert each pixel in the downsampled image to a character.
  local conversionStrategyIndex = InputConversionStrategyIndex:GetValue(request).Value --[[@as integer]]

  local text = InputText:GetValue(request).Value --[[@as string]]
  local frame = request:GetTime()
  local textIndex = frame
  textIndex = textIndex + (frame * charactersPerLine)
  textIndex = textIndex % text:len()

  local downsampledImagePixel = Pixel()
  local textLines = {}
  for imageY = 0, downsampledImage.Height - 1 do
    local row = {}

    for imageX = 0, downsampledImage.Width - 1 do
      downsampledImage:GetPixel(imageX, imageY, downsampledImagePixel)
      -- https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB
      local lightness = 0.5 * (math.max(downsampledImagePixel.R, downsampledImagePixel.G, downsampledImagePixel.B) +
                               math.min(downsampledImagePixel.R, downsampledImagePixel.G, downsampledImagePixel.B))

      local characterList
      if isNilOrEmptyString(text) or translationTable == nil then
        characterList = conversionStrategies[conversionStrategyIndex + 1]
      else
        local idx = textIndex + 1
        local character = text:sub(idx, idx)
        characterList = translationTable[character]
        assert(characterList, "No character list available for character " .. character .. " at index " .. textIndex .. " of input text \"" .. text .. "\"")

        textIndex = (textIndex + 1) % text:len()
      end

      local idx = math.floor(lightness * (utf8.len(characterList) - 1) + 0.5) + 1
      row[imageX + 1] = utf8.sub(characterList, idx, idx)
    end

    textLines[imageY] = table.concat(row)
  end

  -- Composite character shapes into a Shape object.
  local shape = Shape()

  local characterScale = size / fontMetrics.Scale
  local characterScaleFactor = InputCharacterScaleFactor:GetValue(request).Value --[[@as number]]
  if characterScaleFactor > 0 then
    characterScale = characterScale * characterScaleFactor
  end
  local characterTranslationMatrix = Matrix4()
  characterTranslationMatrix:Scale(characterScale, characterScale, 1)
  local yOffsetFactor = InputYOffsetFactor:GetValue(request).Value --[[@as number]]
  characterTranslationMatrix:Move(0, yOffsetFactor * lineHeight, 0)

  for _, line in ipairs(textLines) do
    local lineLength = utf8.len(line)

    -- From https://www.lua.org/manual/5.4/manual.html#pdf-utf8.codepoint, the
    -- integer inputs to utf8.codepoint are *byte* positions, not character
    -- positions. Thus, we want to pass line:len() (the number of bytes in line)
    -- rather than lineLength.
    for _, codepoint in ipairs(utf8.codepoint(line, 1, line:len())) do
      -- Translate to the center of the character.
      characterTranslationMatrix:Move(0.5 * characterWidth, 0, 0)

      -- The GetCharacterShape method of TextStyleFontMetrics seems to be the
      -- only way to create a glyph in a Fuse. GetCharacterShape seems to look
      -- up glyphs by index (its input is an integer, not a string), but limited
      -- Unicode support is possible.
      local characterShape = fontMetrics:GetCharacterShape(codepoint, false)

      -- Some characters (like spaces) have nil shape.
      if characterShape then
        shape:AddShape(characterShape:TransformOfShape(characterTranslationMatrix))
      end

      -- Translate to the end of the character.
      characterTranslationMatrix:Move(0.5 * characterWidth, 0, 0)
    end

    -- Place the next character at the beginning of the line above.
    characterTranslationMatrix:Move(-lineLength * characterWidth, lineHeight, 0)
  end

  -- Fill the shape.
  local oversampling = InputOversampling:GetValue(request).Value --[[@as integer]]
  local outputImageChannel = ImageChannel(outputImage, oversampling)
  outputImageChannel:SetStyleFill(FillStyle()) -- TODO: Is this necessary?
  outputImageChannel:ShapeFill(shape)

  local channelStyle = ChannelStyle()
  channelStyle.Color = Pixel({ R=1, G=1, B=1, A=1 }) -- Text is always white.
  outputImageChannel:PutToImage("CM_Merge", channelStyle)

  OutputImage:Set(request, outputImage)
end
